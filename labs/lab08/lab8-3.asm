%include 'in_out.asm'
SECTION .data
    msg db "Результат:", 0
SECTION .text
    global _start
_start:
    ; Извлекаем из стека количество аргументов (первое значение в стеке)
    pop ecx
    ; Извлекаем из стека имя программы (второе значение в стеке)
    pop edx
    ; Уменьшаем ecx на 1 (количество аргументов без названия программы)
    sub ecx, 1
    ; Используем esi для хранения промежуточных сумм
    mov esi, 1
next:
    ; Проверяем, есть ли еще аргументы
    cmp ecx, 0h
    jz _end          ; Если аргументов нет, выходим из цикла (переход на метку _end)
    ; Иначе извлекаем следующий аргумент из стека
    pop eax
    call atoi        ; Преобразуем символ в число
    ; Умножаем промежуточную сумму на текущий аргумент
    mul esi
    mov esi, eax
    ; Переход к обработке следующего аргумента
    loop next
_end:
    ; Вывод сообщения "Результат:"
    mov eax, msg
    call sprint
    ; Печать результата
    mov eax, esi
    call iprintLF
    ; Завершение программы
    call quit
